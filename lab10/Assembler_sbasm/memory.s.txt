.define LED_ADDRESS 0x10
.define HEX_ADDRESS 0x20



// shows on HEX displays either PASSEd or FAILEd
	

mv r2, #0 // counts each successful test


mv r6, #T1 // save address of next test

sub r0, r0 // set the z flag



// test bne and beq
T1: 	bne FAIL // should not take the branch!
	mv r6, #C1 // save address of next test

C1: 	beq C2 // should take the branch
	mv pc, #FAIL // Argh!

C2: 	add r2, #2 // count the last two successful tests
	mv r6, #T2 // save address of next test

// test bne and beq

T2: 	bne S1 // should take the branch!
	mv pc, #FAIL

S1: 	mv r6, #C3 // save address of next test

C3: 	beq FAIL // should not take the branch
	add r2, #2 // count the last two successful tests
	mv r6, #T3 // save address of next test
	mv r3, #-1 // r3 = 0xFFFF
	add r3, #1 // set the c flag
// test bcc and bcs
T3: 	bcc FAIL // should not take the branch!
	mv r6, #C4 // save address of next test
C4: 	bcs C5 // should take the branch
	mv pc, #FAIL // Argh!
C5: 	add r2, #2 // count the last two successful tests
	mv r6, #T4
	mv r3, #0
	add r3, r3 // clear carry flag

// test bcc and bcs

T4: 	bcc S2 // should take the branch!
	mv pc, #FAIL

S2: 	mv r6, #C6 // save address of next test

C6: 	bcs FAIL // should not take the branch!
	add r2, #2 // count the last two successes
	mv r6, #T5 // save address of next test
	mv r3, #0
	add r3, #-1

// test bpl and bmi

T5: 	bpl FAIL // should not take the branch!
	mv r6, #C7 // save address of next test

C7: 	bmi C8 // should take the branch
	mv pc, #FAIL // Argh!

C8: 	add r2, #2 // count the last two successful tests
	mv r6, #T6
	mv r3, #0
	add r3, r3 // clear negative flag
T6: 	bpl S3 // should take the branch!
	mv pc, #FAIL